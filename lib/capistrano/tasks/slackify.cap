namespace :slack do
  desc 'Notify Slack of a deployment via the incoming webhooks integration - ' \
       ':slack_subdomain and :slack_token must be set'
  task :notify_started do
    run_locally do
      set :time_started, Time.now.to_i

      if fetch(:slack_notify_events).include? :started
        info 'Notifying Slack of deploy starting'

        execute :curl, '-X POST', '--data-urlencode',
          Slackify::Payload.build(self, :starting),
          fetch(:slack_url)
      end
    end
  end
  before 'deploy:starting', 'slack:notify_started'

  desc 'Notify Slack of a deployment via the incoming webhooks integration - ' \
       ':slack_subdomain and :slack_token must be set'
  task :notify_finished do
    run_locally do
      set :time_finished, Time.now.to_i

      if fetch(:slack_notify_events).include? :finished
        info 'Notifying Slack of deploy finished'

        execute :curl, '-X POST', '--data-urlencode',
          Slackify::Payload.build(self, :success),
          fetch(:slack_url)
      end
    end
  end
  after 'deploy:finished', 'slack:notify_finished'

  desc 'Notify Slack of a deployment failure via the incoming webhooks ' \
       'integration - :slack_subdomain and :slack_token must be set'
  task :notify_failed do
    run_locally do
      set :time_finished, Time.now.to_i

      if fetch(:slack_notify_events).include? :failed
        info 'Notifying Slack of deploy failed'

        execute :curl, '-X POST', '--data-urlencode',
          Slackify::Payload.build(self, :failed),
          fetch(:slack_url)
      end
    end
  end
  after 'deploy:failed', 'slack:notify_failed'
end

namespace :load do
  task :defaults do
    set :slack_user, -> { local_user.to_s.strip }
    set :slack_hosts, -> { release_roles(:all).map(&:hostname).join("\n") }
    set :slack_channel, -> { '#beachybot-testing' }
    set :slack_username, 'Capistrano'
    set :repo_link, -> { "<#{fetch(:repo_http_url)}|#{fetch(:application)}>" }

    set :slack_url,
      'https://hooks.slack.com/services/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'

    set :rev_link, -> {
      "<https://github.com/beachyapp/#{fetch(:application)}/commit/#{fetch(:rev)}|#{fetch(:rev)}>"
    }

    set :branch_link, -> {
      "<https://github.com/beachyapp/#{fetch(:application)}/tree/#{fetch(:branch)}|#{fetch(:branch)}>"
    }

    set :slack_deploy_starting_text, -> {
      "Deploying #{fetch(:repo_link)} to #{fetch(:slack_hosts)} on branch #{fetch(:branch_link)} (#{fetch(:rev_link)})"
    }

    set :slack_deploy_failed_text, -> {
      "Deploy of #{fetch(:repo_link)} to #{fetch(:slack_hosts)} on branch #{fetch(:branch_link)} (#{fetch(:rev_link)}) failed."
    }

    set :slack_text, -> {
      elapsed = Integer(fetch(:time_finished) - fetch(:time_started))
      "Deploy of #{fetch(:repo_link)} to #{fetch(:slack_hosts)} on branch #{fetch(:branch_link)} (#{fetch(:rev_link)})  by #{fetch(:slack_user)} succeeded in #{elapsed} seconds."
    }

    set :slack_deploy_starting_color, 'warning'
    set :slack_deploy_finished_color, 'good'
    set :slack_deploy_failed_color, 'danger'
    set :slack_notify_events, [:started, :finished, :failed]
  end
end
